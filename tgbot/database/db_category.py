# - *- coding: utf- 8 - *-
import sqlite3
from pydantic import BaseModel

from tgbot.data.config import PATH_DATABASE
from tgbot.database.db_helper import dict_factory, update_format_where, update_format
from tgbot.utils.const_functions import ded, get_unix


# –ú–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã
class CategoryModel(BaseModel):
    increment: int
    category_id: int
    category_name: str
    category_unix: int


# –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
class Categoryx:
    storage_name = "storage_category"

    # üîπ –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞)
    DEFAULT_CATEGORIES = [
        "–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
        "–ü–ª–∏—Ç–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
        "–°—Ç—è–∂–∫–∞ –ø–æ–ª–∞",
        "–ë–µ—Ç–æ–Ω–Ω—ã–µ –ø–æ–ª—ã",
        "–ë–µ—Ç–æ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
        "–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
        "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ —Å—Ç–µ–Ω",
        "–®–ø–∞–∫–ª–µ–≤–∫–∞ —Å—Ç–µ–Ω",
        "–ú–∞–ª—è—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
        "–ü–æ–∫—Ä–∞—Å–∫–∞",
        "–û–±–æ–∏",
        "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞",
        "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞",
        "–ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
        "–§–∞—Å–∞–¥–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
        "–§—É–Ω–¥–∞–º–µ–Ω—Ç",
        "–î–µ–º–æ–Ω—Ç–∞–∂",
        "–°–≤–∞—Ä–∫–∞",
        "–û–∫–Ω–∞",
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–µ—Ä–µ–π",
        "–ü–æ–ª—ã",
        "–ö–∞—Ä–∫–∞—Å",
        "–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è",
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ",
        "–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
        "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–°–º–µ—Ç–∞",
        "–£—Ç–µ–ø–ª–µ–Ω–∏–µ",
        "–ü–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∏",
        "–í—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞",
        "–ü–æ–¥—Å–æ–±–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
        "–ö–ª–∞–¥–∫–∞",
        "–î–æ–º —Å –Ω—É–ª—è",
        "–î–∏–∑–∞–π–Ω –ø—Ä–æ–µ–∫—Ç",
        "–î–µ–∫–æ—Ä",
        "–•–∞–ª—Ç—É—Ä–∞",
    ]

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    @staticmethod
    def add(category_id: int, category_name: str):
        category_unix = get_unix()
        with sqlite3.connect(PATH_DATABASE) as con:
            con.row_factory = dict_factory
            con.execute(
                ded(
                    f"""
                    INSERT INTO {Categoryx.storage_name} (
                        category_id,
                        category_name,
                        category_unix
                    ) VALUES (?, ?, ?)
                """
                ),
                [category_id, category_name, category_unix],
            )

    # ‚úÖ –°–∏–¥–∏–Ω–≥ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–±–µ–∑ –¥—É–±–ª–µ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
    @staticmethod
    def ensure_defaults():
        with sqlite3.connect(PATH_DATABASE) as con:
            con.row_factory = dict_factory
            # —á—Ç–æ —É–∂–µ –µ—Å—Ç—å
            existing = con.execute(
                f"SELECT category_name FROM {Categoryx.storage_name}"
            ).fetchall()
            have = {
                (row.get("category_name") or "").strip().lower()
                for row in (existing or [])
            }

            to_add = []
            base_id = get_unix()
            for idx, name in enumerate(Categoryx.DEFAULT_CATEGORIES):
                name_clean = (name or "").strip()
                if not name_clean:
                    continue
                if name_clean.lower() in have:
                    continue
                cat_id = base_id + idx  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å id
                cat_unix = base_id + idx
                to_add.append((cat_id, name_clean, cat_unix))

            if to_add:
                con.executemany(
                    f"""
                    INSERT INTO {Categoryx.storage_name} (
                        category_id, category_name, category_unix
                    ) VALUES (?, ?, ?)
                    """,
                    to_add,
                )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    @staticmethod
    def get(**kwargs) -> CategoryModel:
        with sqlite3.connect(PATH_DATABASE) as con:
            con.row_factory = dict_factory
            sql = f"SELECT * FROM {Categoryx.storage_name}"
            sql, parameters = update_format_where(sql, kwargs)
            response = con.execute(sql, parameters).fetchone()
            if response is not None:
                response = CategoryModel(**response)
            return response

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
    @staticmethod
    def gets(**kwargs) -> list[CategoryModel]:
        with sqlite3.connect(PATH_DATABASE) as con:
            con.row_factory = dict_factory
            sql = f"SELECT * FROM {Categoryx.storage_name}"
            sql, parameters = update_format_where(sql, kwargs)
            rows = con.execute(sql, parameters).fetchall()
            if rows:
                return [CategoryModel(**r) for r in rows]
            return []

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π (—Å –∞–≤—Ç–æ—Å–∏–¥–∏–Ω–≥–æ–º –ø—Ä–∏ –ø—É—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ)
    @staticmethod
    def get_all() -> list[CategoryModel]:
        with sqlite3.connect(PATH_DATABASE) as con:
            con.row_factory = dict_factory
            sql = f"SELECT * FROM {Categoryx.storage_name}"
            rows = con.execute(sql).fetchall()

            # –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –¥–æ—Å—ã–ø–∞–µ–º –¥–µ—Ñ–æ–ª—Ç –∏ —á–∏—Ç–∞–µ–º —Å–Ω–æ–≤–∞
            if not rows:
                Categoryx.ensure_defaults()
                rows = con.execute(sql).fetchall()

            if rows:
                return [CategoryModel(**r) for r in rows]
            return []

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    @staticmethod
    def update(category_id, **kwargs):
        with sqlite3.connect(PATH_DATABASE) as con:
            con.row_factory = dict_factory
            sql = f"UPDATE {Categoryx.storage_name} SET"
            sql, parameters = update_format(sql, kwargs)
            parameters.append(category_id)
            con.execute(sql + "WHERE category_id = ?", parameters)

    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    @staticmethod
    def delete(**kwargs):
        with sqlite3.connect(PATH_DATABASE) as con:
            con.row_factory = dict_factory
            sql = f"DELETE FROM {Categoryx.storage_name}"
            sql, parameters = update_format_where(sql, kwargs)
            con.execute(sql, parameters)

    # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
    @staticmethod
    def clear():
        with sqlite3.connect(PATH_DATABASE) as con:
            con.row_factory = dict_factory
            con.execute(f"DELETE FROM {Categoryx.storage_name}")
