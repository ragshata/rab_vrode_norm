# - *- coding: utf- 8 - *-
from aiogram import Router, Bot, F
from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, Message

from tgbot.database.db_category import Categoryx
from tgbot.utils.const_functions import ikb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from tgbot.database.db_item import Itemx
from tgbot.database.db_position import Positionx
from tgbot.database.db_purchases import Purchasesx
from tgbot.database.db_purchases_clients import Purchasesclientx
from tgbot.database.db_users import Clientx, Userx
from tgbot.keyboards.inline_admin import close_finl
from tgbot.keyboards.inline_admin_page import (
    admin_position_edit_swipe_fp,
    category_edit_swipe_fp,
    position_add_swipe_fp,
    position_edit_category_swipe_fp,
    position_edit_swipe_fp,
    item_add_position_swipe_fp,
    item_add_category_swipe_fp,
    item_delete_swipe_fp,
)
from tgbot.keyboards.inline_admin_prod import (
    category_edit_delete_finl,
    position_edit_clear_finl,
    position_edit_delete_finl,
    position_edit_cancel_finl,
    category_edit_cancel_finl,
    position_edit_done_finl,
    position_edit_open_finl_dindon,
    products_removes_finl,
    products_removes_categories_finl,
    products_removes_positions_finl,
    products_removes_items_finl,
    item_add_finish_finl,
)
from tgbot.keyboards.reply_main import menu_second_start_clients
from tgbot.utils.const_functions import (
    clear_list,
    gen_id,
    is_number,
    to_number,
    del_message,
    ded,
    get_unix,
    clear_html,
)

from tgbot.utils.misc.bot_models import FSM, ARS
from tgbot.utils.misc_functions import upload_text, upload_photo
from tgbot.utils.text_functions import (
    category_open_admin,
    position_open_admin,
    item_open_admin,
)

router = Router(name=__name__)


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(F.text == "üóÉ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def prod_category_add(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await state.set_state("here_category_name")
    await message.answer("<b>üóÉ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>")


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.message(F.text == "üñç –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def prod_category_edit(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_categories = Categoryx.get_all()

    if len(get_categories) >= 1:
        await message.answer(
            "<b>üóÉ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è</b>",
            reply_markup=category_edit_swipe_fp(0),
        )
    else:
        await message.answer("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>")


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
@router.message(F.text == "üìÅ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
async def prod_position_add(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_categories = Categoryx.get_all()

    if len(get_categories) >= 1:
        await message.answer(
            "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ </b>",
            reply_markup=position_add_swipe_fp(0),
        )
    else:
        await message.answer("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞</b>")


# –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.message(F.text == "üñç –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
async def prod_position_edit(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_categories = Categoryx.get_all()

    if len(get_categories) >= 1:
        await message.answer(
            "<b>üñç –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è </b>",
            reply_markup=position_edit_category_swipe_fp(0),
        )
    else:
        await message.answer("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π</b>")


# –°—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑—ã")
async def prod_item_add(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_categories = Categoryx.get_all()

    if len(get_categories) >= 1:
        await message.answer(
            "<b>‚ûï –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚ûï</b>",
            reply_markup=item_add_category_swipe_fp(0),
        )
    else:
        await message.answer("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–∫–∞–∑ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞</b>")


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø–æ–∑–∏—Ü–∏–π –∏–ª–∏ –∑–∞–∫–∑–æ–≤
@router.message(F.text == "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ")
async def prod_removes(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(
        "<b> –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ‚ùå</b>\n",
        reply_markup=products_removes_finl(),
    )


################################################################################
############################### –°–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–û–í #############################
# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@router.message(F.text, StateFilter("here_category_name"))
async def prod_category_add_name_get(
    message: Message, bot: Bot, state: FSM, arSession: ARS
):
    if len(message.text) > 50:
        return await message.answer(
            "<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
            "üóÉ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        )

    await state.clear()

    category_id = get_unix()
    Categoryx.add(category_id, clear_html(message.text))

    await category_open_admin(bot, message.from_user.id, category_id, 0)


################################################################################
############################### –ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò ############################
# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("catategory_edit_swipe:"))
async def prod_category_edit_swipe(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text(
        "<b>üóÉ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
        reply_markup=category_edit_swipe_fp(remover),
    )


# –í—ã–±–æ—Ä —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("category_edit_open:"))
async def prod_category_edit_open(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    await state.clear()

    await del_message(call.message)
    await category_open_admin(bot, call.from_user.id, category_id, remover)


############################ –°–ê–ú–û –ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò ##########################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("category_edit_name:"))
async def prod_category_edit_name(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    await state.update_data(here_category_id=category_id)
    await state.update_data(here_remover=remover)
    await state.set_state("here_category_edit_name")

    await del_message(call.message)

    await call.message.answer(
        "<b>üóÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>",
        reply_markup=category_edit_cancel_finl(category_id, remover),
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(F.text, StateFilter("here_category_edit_name"))
async def prod_category_edit_name_get(
    message: Message, bot: Bot, state: FSM, arSession: ARS
):
    category_id = (await state.get_data())["here_category_id"]
    remover = (await state.get_data())["here_remover"]

    if len(message.text) > 50:
        return await message.answer(
            "<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
            "üóÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            reply_markup=category_edit_cancel_finl(category_id, remover),
        )

    await state.clear()

    Categoryx.update(category_id, category_name=clear_html(message.text))
    await category_open_admin(bot, message.from_user.id, category_id, remover)


# –û–∫–Ω–æ —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@router.callback_query(F.data.startswith("category_edit_delete:"))
async def prod_category_edit_delete(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    await call.message.edit_text(
        "<b>‚ùó –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤—Å–µ –µ—ë –¥–∞–Ω–Ω—ã–µ?</b>",
        reply_markup=category_edit_delete_finl(category_id, remover),
    )


# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("category_edit_delete_confirm:"))
async def prod_category_edit_delete_confirm(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    Categoryx.delete(category_id=category_id)
    Positionx.delete(category_id=category_id)
    Itemx.delete(category_id=category_id)

    await call.answer("üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –≤—Å–µ –µ—ë –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã ‚úÖ")

    get_categories = Categoryx.get_all()

    if len(get_categories) >= 1:
        await call.message.edit_text(
            "<b>üóÉ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
            reply_markup=category_edit_swipe_fp(remover),
        )
    else:
        await del_message(call.message)


################################################################################
############################### –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò #############################
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.state import StateFilter


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
def cancel_order_button():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                    callback_data="cancel_create_order",
                )
            ]
        ]
    )


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_add_open:"))
async def prod_position_add_open(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    category_id = call.data.split(":")[1]

    await state.update_data(here_category_id=category_id)
    await state.set_state("here_position_name")

    await call.message.edit_text(
        "<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞</b>",
        reply_markup=cancel_order_button(),
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@router.message(F.text, StateFilter("here_position_name"))
async def prod_position_add_name_get(
    message: Message, bot: Bot, state: FSM, arSession: ARS
):
    if len(message.text) > 50:
        return await message.answer(
            "<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞",
            reply_markup=cancel_order_button(),
        )

    await state.update_data(here_position_name=clear_html(message.text))
    await state.set_state("here_position_price")

    await message.answer(
        "<b>üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –∑–∞–∫–∞–∑–∞</b>",
        reply_markup=cancel_order_button(),
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@router.message(F.text, StateFilter("here_position_price"))
async def prod_position_add_price_get(
    message: Message, bot: Bot, state: FSM, arSession: ARS
):
    if not is_number(message.text):
        return await message.answer(
            "<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –∑–∞–∫–∞–∑–∞",
            reply_markup=cancel_order_button(),
        )

    if to_number(message.text) > 10_000_000 or to_number(message.text) < 0:
        return await message.answer(
            "<b>‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0‚ÇΩ –∏–ª–∏ –±–æ–ª—å—à–µ 10 000 000‚ÇΩ.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –∑–∞–∫–∞–∑–∞",
            reply_markup=cancel_order_button(),
        )

    await state.update_data(here_position_price=to_number(message.text))
    await state.set_state("here_position_desc")

    await message.answer(
        "<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞</b>\n"
        "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=cancel_order_button(),
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@router.message(F.text, StateFilter("here_position_desc"))
async def prod_position_add_desc_get(
    message: Message, bot: Bot, state: FSM, arSession: ARS
):
    if len(message.text) > 400:
        return await message.answer(
            "<b>‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 400 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏\n",
            reply_markup=cancel_order_button(),
        )

    try:
        if message.text != "0":
            await (await message.answer(message.text)).delete()

            position_desc = message.text
        else:
            position_desc = "None"
    except:
        return await message.answer(
            "<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n" "üìÅ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏\n",
            reply_markup=cancel_order_button(),
        )

    await state.update_data(here_position_desc=position_desc)

    state_data = await state.get_data()

    category_id = state_data["here_category_id"]
    position_name = clear_html(state_data["here_position_name"])
    position_price = to_number(state_data["here_position_price"])
    position_desc = state_data["here_position_desc"]
    position_id = get_unix()
    await state.clear()

    Positionx.add(
        category_id,
        position_id,
        position_name,
        position_price,
        position_desc,
    )
    get_position = Positionx.get(position_id=position_id)
    position_unix = get_position.position_unix
    await position_open_admin(bot, message.from_user.id, position_id, position_unix)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
@router.callback_query(F.data == "cancel_create_order")
async def cancel_create_order(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    await state.clear()  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await call.message.edit_text("<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é</b>", reply_markup=None)

    # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
    await menu_second_start_clients(call.message.chat.id, bot)


################################################################################
############################### –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò ##############################
# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_edit_category_swipe:"))
async def prod_position_edit_category_swipe(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text(
        "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
        reply_markup=position_edit_category_swipe_fp(remover),
    )


# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("admin_position_edit_category_swipe:"))
async def prod_position_edit_category_swipe(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text(
        "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
        reply_markup=position_edit_category_swipe_fp(remover),
    )


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
@router.callback_query(F.data.startswith("position_edit_category_open:"))
async def prod_position_edit_category_open(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    category_id = call.data.split(":")[1]

    get_category = Categoryx.get(category_id=category_id)
    get_positions = Positionx.gets(category_id=category_id)

    if len(get_positions) >= 1:
        await call.message.edit_text(
            "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
            reply_markup=position_edit_swipe_fp(0, category_id, call),
        )
    else:
        await call.answer(
            f"üìÅ –ü–æ–∑–∏—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category.category_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        )


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
@router.callback_query(F.data.startswith("admin_position_edit_category_open:"))
async def prod_position_edit_category_open(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    category_id = call.data.split(":")[1]

    get_category = Categoryx.get(category_id=category_id)
    get_positions = Positionx.gets(category_id=category_id)

    if len(get_positions) >= 1:
        await call.message.edit_text(
            "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
            reply_markup=admin_position_edit_swipe_fp(0, category_id, call),
        )
    else:
        await call.answer(
            f"üìÅ –ó–∞–∫–∞–∑—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category.category_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        )


# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_edit_swipe:"))
async def prod_position_edit_swipe(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    await del_message(call.message)

    await call.message.answer(
        "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
        reply_markup=position_edit_swipe_fp(remover, category_id, call),
    )


# –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("position_edit_open:"))
async def prod_position_edit_open(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[2]
    category_id = call.data.split(":")[3]
    remover = int(call.data.split(":")[4])
    position_unix = call.data.split(":")[1]

    await state.clear()

    await del_message(call.message)
    await position_open_admin(bot, call.from_user.id, position_id, position_unix)


############################ –°–ê–ú–û –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò ############################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_edit_name:"))
async def prod_position_edit_name(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    await state.update_data(here_position_id=position_id)
    await state.update_data(here_category_id=category_id)
    await state.update_data(here_remover=remover)
    await state.set_state("here_position_edit_name")

    await del_message(call.message)

    await call.message.answer(
        "<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>",
        reply_markup=position_edit_cancel_finl(position_id, category_id, remover),
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@router.message(F.text, StateFilter("here_position_edit_name"))
async def prod_position_edit_name_get(
    message: Message, bot: Bot, state: FSM, arSession: ARS
):
    state_data = await state.get_data()

    position_id = state_data["here_position_id"]
    category_id = state_data["here_category_id"]
    remover = state_data["here_remover"]

    if len(message.text) > 50:
        return await message.answer(
            "<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏",
            reply_markup=position_edit_cancel_finl(position_id, category_id, remover),
        )

    await state.clear()
    get_position = Positionx.get(position_id=position_id)
    position_unix = get_position.position_unix
    Positionx.update(position_id, position_name=clear_html(message.text))
    await position_open_admin(bot, message.from_user.id, position_id, position_unix)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_edit_price:"))
async def prod_position_edit_price(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    await state.update_data(here_position_id=position_id)
    await state.update_data(here_category_id=category_id)
    await state.update_data(here_remover=remover)
    await state.set_state("here_position_edit_price")

    await del_message(call.message)

    await call.message.answer(
        "<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>",
        reply_markup=position_edit_cancel_finl(position_id, category_id, remover),
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@router.message(F.text, StateFilter("here_position_edit_price"))
async def prod_position_edit_price_get(
    message: Message, bot: Bot, state: FSM, arSession: ARS
):
    state_data = await state.get_data()

    position_id = state_data["here_position_id"]
    category_id = state_data["here_category_id"]
    remover = state_data["here_remover"]

    if not is_number(message.text):
        await message.answer(
            "<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n" "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏",
            reply_markup=position_edit_cancel_finl(position_id, category_id, remover),
        )

    if to_number(message.text) > 10_000_000 or to_number(message.text) < 0:
        await message.answer(
            "<b>‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0‚ÇΩ –∏–ª–∏ –±–æ–ª—å—à–µ 10 000 000‚ÇΩ.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏",
            reply_markup=position_edit_cancel_finl(position_id, category_id, remover),
        )

    await state.clear()
    get_position = Positionx.get(position_id=position_id)
    position_unix = get_position.position_unix
    Positionx.update(position_id, position_price=to_number(message.text))
    await position_open_admin(bot, message.from_user.id, position_id, position_unix)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_edit_desc:"))
async def prod_position_edit_desc(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    await state.update_data(here_position_id=position_id)
    await state.update_data(here_category_id=category_id)
    await state.update_data(here_remover=remover)
    await state.set_state("here_position_edit_desc")

    await del_message(call.message)

    await call.message.answer(
        "<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>\n",
        reply_markup=position_edit_cancel_finl(position_id, category_id, remover),
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@router.message(F.text, StateFilter("here_position_edit_desc"))
async def prod_position_edit_desc_get(
    message: Message, bot: Bot, state: FSM, arSession: ARS
):
    state_data = await state.get_data()

    category_id = state_data["here_category_id"]
    position_id = state_data["here_position_id"]
    remover = state_data["here_remover"]

    if len(message.text) > 400:
        return await message.answer(
            "<b>‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 400 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏\n"
            "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
            reply_markup=position_edit_cancel_finl(position_id, category_id, remover),
        )

    try:
        if message.text != "0":
            await (await message.answer(message.text)).delete()

            position_desc = message.text
        else:
            position_desc = "None"
    except:
        return await message.answer(
            "<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
            "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏\n"
            "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
            reply_markup=position_edit_cancel_finl(position_id, category_id, remover),
        )

    await state.clear()
    get_position = Positionx.get(position_id=position_id)
    position_unix = get_position.position_unix
    Positionx.update(position_id, position_desc=position_desc)
    await position_open_admin(bot, message.from_user.id, position_id, position_unix)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_edit_photo:"))
async def prod_position_edit_photo(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    await state.update_data(here_position_id=position_id)
    await state.update_data(here_category_id=category_id)
    await state.update_data(here_remover=remover)
    await state.set_state("here_position_edit_photo")

    await del_message(call.message)

    state_data = await state.get_data()
    await state.clear()

    position_id = state_data["here_position_id"]
    category_id = state_data["here_category_id"]
    remover = state_data["here_remover"]

    await call.message.answer(
        "‚ùï –ì–æ—Ç–æ–≤–æ",
        reply_markup=position_edit_cancel_finl(position_id, category_id, remover),
    )


# –í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(F.data.startswith("position_edit_items:"))
async def prod_position_edit_items(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    get_position = Positionx.get(position_id=position_id)
    get_items = Itemx.gets(position_id=position_id)

    if len(get_items) >= 1:
        save_items = "\n\n".join([item.item_data for item in get_items])
        save_items = await upload_text(arSession, save_items)

        await call.message.answer(
            f"<b>üì• –í—Å–µ –∑–∞–∫–∞–∑—ã —Ç–∏–ø–∞: <code>{get_position.position_name}</code>\n"
            f"üîó –°—Å—ã–ª–∫–∞: <a href='{save_items}'>–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a></b>",
            reply_markup=close_finl(),
        )
        await call.answer(cache_time=5)
    else:
        await call.answer("‚ùï –í –¥–∞–Ω–Ω–æ–º —Ç–∏–ø–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–∫–∞–∑—ã", True)


# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_edit_delete:"))
async def prod_position_edit_delete(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    _, position_id, category_id, remover, punix = call.data.split(":")
    remover = int(remover)
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await del_message(call.message)
    await call.message.answer(
        "<b>üìÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑? ‚ùå</b>",
        reply_markup=position_edit_delete_finl_confirm(
            position_id, category_id, remover, punix
        ),
    )


from aiogram.utils.keyboard import InlineKeyboardBuilder


def position_edit_delete_finl_confirm(
    position_id, category_id, remover, position_unix
) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(
        ikb(
            "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
            data=f"position_edit_delete_confirm:{position_id}:{category_id}:{remover}:{position_unix}",
        ),
        ikb(
            "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å",
            data=f"position_edit_open:{position_id}:{category_id}:{remover}",
        ),
    )
    return kb.as_markup()


@router.callback_query(F.data.startswith("position_edit_delete_confirm:"))
async def prod_position_edit_delete_confirm(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    _, position_id, category_id, remover, punix = call.data.split(":")
    remover = int(remover)
    punix = int(punix)

    # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ position_unix
    Positionx.delete(position_unix=punix)

    # –ï—Å–ª–∏ —É —Ç–µ–±—è –≤ Itemx —Å–≤—è–∑–∫–∞ —Ç–æ–∂–µ —á–µ—Ä–µ–∑ position_unix ‚Äî —É–¥–∞–ª–∏ –ø–æ –Ω–µ–º—É:
    # Itemx.delete(position_unix=punix)
    # (–ù–ò –í –ö–û–ï–ú –°–õ–£–ß–ê–ï –Ω–µ —É–¥–∞–ª—è–π Itemx –ø–æ position_id, –∏–Ω–∞—á–µ —É–¥–∞–ª–∏—à—å –≤—Å—ë –≤–ª–∞–¥–µ–ª—å—Ü–∞)

    await call.answer("üìÅ –ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω ‚úÖ")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫/–º–µ–Ω—é
    if len(Positionx.gets(category_id=category_id)) >= 1:
        await call.message.edit_text(
            "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
            reply_markup=position_edit_swipe_fp(remover, category_id, call),
        )
    else:
        await del_message(call.message)


# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_edit_confirm:"))
async def prod_position_edit_delete(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])
    position_unix = call.data.split(":")[4]

    await del_message(call.message)

    await call.message.answer(
        "<b>üìÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑? ‚úîÔ∏è</b>",
        reply_markup=position_edit_done_finl(
            position_id, category_id, remover, position_unix
        ),
    )


@router.callback_query(F.data.startswith("position_done_dindon:"))
async def prod_position_edit_delete(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])
    position_unix = call.data.split(":")[4]
    position = Positionx.get(position_unix=position_unix)
    name = position.position_name
    await del_message(call.message)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(
        position_id,  # –£–∫–∞–∑–∞–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        text=(
            f"<b>üìÅ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–∫–∞–∑: <u>{name}</u></b>\n\n"
        ),
        reply_markup=position_edit_open_finl_dindon(
            position_id, category_id, remover, position_unix
        ),
    )

    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    await call.message.answer("<b>–ó–∞–∫–∞–∑—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω!</b>")


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_edit_delete_confirm:"))
async def prod_position_edit_delete_confirm(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    Itemx.delete(position_id=position_id)
    Positionx.delete(position_id=position_id)

    await call.answer("üìÅ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∑–∞–∫–∞–∑—ã ‚úÖ")

    if len(Positionx.gets(category_id=category_id)) >= 1:
        await call.message.edit_text(
            "<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
            reply_markup=position_edit_swipe_fp(remover, category_id, call),
        )
    else:
        await del_message(call.message)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data.startswith("position_edit_done_confirm:"))
async def prod_position_edit_delete_confirm(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = int(call.data.split(":")[1])
    position_unix = int(call.data.split(":")[4])
    get_items = Itemx.gets(position_id=position_id)
    worker_id = Positionx.get_worker_id(position_id=position_id)
    position = Positionx.get(position_id=position_id)

    await call.message.edit_text("<b>üîÑ –ñ–¥–∏—Ç–µ</b>")

    get_position = Positionx.get(position_unix=position_unix)
    get_category = Categoryx.get(category_id=get_position.category_id)
    get_client = Clientx.get(client_id=call.from_user.id)

    get_user = Userx.get(user_id=worker_id)

    purchase_price = round(get_position.position_price, 2)

    save_items, save_len = Itemx.buy(get_items, 1)
    save_count = len(save_items)

    Userx.update(
        get_user.user_id,
        user_balance=round(get_user.user_balance + purchase_price, 2),
    )

    purchase_receipt = gen_id()
    purchase_unix = get_unix()
    purchase_data = "\n".join(save_items)

    Purchasesx.add(
        get_user.user_id,
        get_user.user_balance,
        round(get_user.user_balance - purchase_price, 2),
        purchase_receipt,
        purchase_data,
        purchase_price,
        get_position.position_price,
        get_position.position_id,
        get_position.position_name,
        get_category.category_id,
        get_category.category_name,
    )

    purchase_price = round(get_position.position_price, 2)

    save_items, save_len = Itemx.buy(get_items, 1)
    save_count = len(save_items)

    Clientx.update(
        get_client.client_id,
        client_balance=round(get_client.client_balance - purchase_price, 2),
    )

    purchase_receipt = gen_id()
    purchase_unix = get_unix()
    purchase_data = "\n".join(save_items)

    Purchasesclientx.add(
        get_client.client_id,
        get_client.client_balance,
        round(get_client.client_balance - purchase_price, 2),
        purchase_receipt,
        purchase_data,
        purchase_price,
        get_position.position_price,
        get_position.position_id,
        get_position.position_name,
        get_category.category_id,
        get_category.category_name,
    )

    # Positionx.update_gpt(
    #    field_name="position_unix",  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ –ø–æ–ª—é position_unix
    #    field_value=get_position.position_unix,
    #    position_status=1,
    # )

    Positionx.delete(position_unix=get_position.position_unix)

    Itemx.delete(position_id=position_id)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="1 ‚≠êÔ∏è", callback_data=f"rate_worker:{worker_id}:1"
                ),
                InlineKeyboardButton(
                    text="2 ‚≠êÔ∏è", callback_data=f"rate_worker:{worker_id}:2"
                ),
                InlineKeyboardButton(
                    text="3 ‚≠êÔ∏è", callback_data=f"rate_worker:{worker_id}:3"
                ),
                InlineKeyboardButton(
                    text="4 ‚≠êÔ∏è", callback_data=f"rate_worker:{worker_id}:4"
                ),
                InlineKeyboardButton(
                    text="5 ‚≠êÔ∏è", callback_data=f"rate_worker:{worker_id}:5"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_rating:{worker_id}"
                )
            ],
        ]
    )

    await call.message.answer(
        ded(
            f"""
            <b>‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!</b>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            ‚ñ™Ô∏è –ó–∞–∫–∞–∑: <code>{position.position_name} - {position.position_price}‚ÇΩ</code>
            ‚ñ™Ô∏è –û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:
        """
        ),
        reply_markup=keyboard,
    )


@router.callback_query(F.data.startswith("rate_worker:"))
async def rate_worker(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
    """
    try:
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ callback_data
        data = call.data.split(":")
        worker_id = int(data[1])  # worker_id == user_id
        rating = int(data[2])

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏
        Userx.update_rating(worker_id, rating)
        await call.message.edit_text("<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!</b>")
    except ValueError as e:
        await call.message.edit_text(f"<b>–û—à–∏–±–∫–∞: {str(e)}</b>")
    except Exception as e:
        await call.message.edit_text("<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏.</b>")
        print(e)


@router.callback_query(F.data.startswith("skip_rating:"))
async def skip_rating(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ü–µ–Ω–∫–∏.
    """
    worker_id = int(call.data.split(":")[1])
    await call.message.edit_text("<b>–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –æ—Ü–µ–Ω–∫—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.</b>")


# –û—á–∏—Å—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_edit_clear:"))
async def prod_position_edit_clear(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    await del_message(call.message)

    await call.message.answer(
        "<b>üìÅ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–∑–∏—Ü–∏–∏?</b>",
        reply_markup=position_edit_clear_finl(position_id, category_id, remover),
    )


# –°–æ–≥–ª–∞—Å–∏–µ –æ—á–∏—Å—Ç–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
@router.callback_query(F.data.startswith("position_edit_clear_confirm:"))
async def prod_position_edit_clear_confirm(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    Itemx.delete(position_id=position_id)
    await call.answer("üìÅ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ –ø–æ–∑–∏—Ü–∏–∏ ‚úÖ")

    await del_message(call.message)
    await position_open_admin(bot, call.from_user.id, position_id)


################################################################################
############################### –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–û–í #############################
# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(F.data.startswith("item_add_category_swipe:"))
async def prod_item_add_category_swipe(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[1])

    await call.message.edit_text(
        "<b>‚ûï –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ ‚ûï</b>",
        reply_markup=item_add_category_swipe_fp(remover),
    )


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
@router.callback_query(F.data.startswith("item_add_category_open:"))
async def prod_item_add_category_open(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    get_category = Categoryx.get(category_id=category_id)
    get_positions = Positionx.gets(category_id=category_id)

    await del_message(call.message)

    if len(get_positions) >= 1:
        await call.message.answer(
            "<b>‚ûï –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ ‚ûï</b>",
            reply_markup=item_add_position_swipe_fp(0, category_id),
        )
    else:
        await call.answer(
            f"‚ûï –ü–æ–∑–∏—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category.category_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        )


# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(F.data.startswith("item_add_position_swipe:"))
async def prod_item_add_position_swipe(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    await call.message.edit_text(
        "<b>üîé –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ ‚ûï</b>",
        reply_markup=item_add_position_swipe_fp(remover, category_id),
    )


# –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(F.data.startswith("item_add_position_open:"), flags={"rate": 0})
async def prod_item_add_position_open(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]

    await state.update_data(here_add_item_category_id=category_id)
    await state.update_data(here_add_item_position_id=position_id)
    await state.update_data(here_add_item_count=0)
    await state.set_state("here_add_items")

    await del_message(call.message)

    await call.message.answer(
        ded(
            f"""
            <b>üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤.</b>
            ‚ùó –ó–∞–∫–∞–∑—ã —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –æ–¥–Ω–æ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ—á–∫–æ–π. –ü—Ä–∏–º–µ—Ä:
            <code>–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞...

            –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞...

            –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞...</code>
        """
        ),
        reply_markup=item_add_finish_finl(position_id),
    )


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(
    F.data.startswith("item_add_position_finish:"), flags={"rate": 0}
)
async def prod_item_add_finish(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[1]

    try:
        count_items = (await state.get_data())["here_add_item_count"]
    except:
        count_items = 0

    await state.clear()

    await call.message.edit_reply_markup()
    await call.message.answer(
        "<b>üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n"
        f"üîé –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: <code>{count_items}—à—Ç</code></b>",
    )

    get_position = Positionx.get(position_id=position_id)
    position_unix = get_position.position_unix

    await position_open_admin(bot, call.from_user.id, position_id, position_unix)


# –ü—Ä–∏–Ω—è—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
@router.message(F.text, StateFilter("here_add_items"), flags={"rate": 0})
async def prod_item_add_get(message: Message, bot: Bot, state: FSM, arSession: ARS):
    cache_message = await message.answer("<b>‚åõ –ñ–¥–∏—Ç–µ, –∑–∞–∫–∞–∑—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è...</b>")

    get_items = clear_list(message.text.split("\n\n"))

    count_item = (await state.get_data())["here_add_item_count"]
    category_id = (await state.get_data())["here_add_item_category_id"]
    position_id = (await state.get_data())["here_add_item_position_id"]

    await state.update_data(here_add_item_count=count_item)

    get_user = Userx.get(user_id=message.from_user.id)
    Itemx.add(
        get_user.user_id,
        category_id,
        position_id,
        get_items,
    )

    await cache_message.edit_text(
        f"<b>üì• –ó–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ</b>",
        reply_markup=item_add_finish_finl(position_id),
    )


################################################################################
############################### –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–û–í ###############################
# –°—Ç—Ä–∞–Ω–∏—Ü—ã —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(F.data.startswith("item_delete_swipe:"))
async def prod_item_delete_swipe(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    get_items = Itemx.gets(position_id=position_id)
    get_position = Positionx.get(position_id=position_id)

    await del_message(call.message)

    if len(get_items) >= 1:
        await call.message.answer(
            "<b>‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∫–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>",
            reply_markup=item_delete_swipe_fp(remover, position_id, category_id),
        )
    else:
        await call.answer(
            f"‚ùå –ó–∞–∫–∞–∑—ã –≤ –ø–æ–∑–∏—Ü–∏–∏ {get_position.position_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        )


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith("item_delete_open:"))
async def prod_item_delete_open(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    item_id = call.data.split(":")[1]

    await del_message(call.message)
    await item_open_admin(bot, call.from_user.id, item_id, 0)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith("item_delete_confirm:"))
async def prod_item_delete_confirm_open(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    item_id = call.data.split(":")[1]

    get_item = Itemx.get(item_id=item_id)
    get_items = Itemx.gets(position_id=get_item.position_id)

    Itemx.delete(item_id=item_id)

    await call.message.edit_text(
        f"<b>‚úÖ –ó–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω</b>\n"
        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"üßëüèª‚ÄçüíªÔ∏è –ó–∞–∫–∞–∑: <code>{get_item.item_data}</code>"
    )

    if len(get_items) >= 1:
        await call.message.answer(
            "<b>üßëüèª‚Äçüíª –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>",
            reply_markup=item_delete_swipe_fp(
                0, get_item.position_id, get_item.category_id
            ),
        )


################################################################################
############################### –£–î–ê–õ–ï–ù–ò–ï –†–ê–ó–î–ï–õ–û–í ##############################
# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
@router.callback_query(F.data == "prod_removes_return")
async def prod_removes_return(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    await state.clear()

    await call.message.edit_text(
        "<b>üßëüèª‚Äçüíª –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ‚ùå</b>\n",
        reply_markup=products_removes_finl(),
    )


# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data == "prod_removes_categories")
async def prod_removes_categories(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    get_categories = len(Categoryx.get_all())
    get_positions = len(Positionx.get_all())

    await call.message.edit_text(
        f"<b>‚ùå –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–∑–∏—Ü–∏–∏ –∏ –∑–∞–∫–∞–∑—ã?</b>\n"
        f"üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: <code>{get_categories}—à—Ç</code>\n"
        f"üìÅ –ó–∞–∫–∞–∑–æ–≤: <code>{get_positions}—à—Ç</code>\n",
        reply_markup=products_removes_categories_finl(),
    )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ–∑–∏—Ü–∏–π –∏ –∑–∞–∫–∞–∑–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
@router.callback_query(F.data == "prod_removes_categories_confirm")
async def prod_removes_categories_confirm(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    get_categories = len(Categoryx.get_all())
    get_positions = len(Positionx.get_all())

    Categoryx.clear()
    Positionx.clear()
    Itemx.clear()

    await call.message.edit_text(
        f"<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n"
        f"üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: <code>{get_categories}—à—Ç</code>\n"
        f"üìÅ –ó–∞–∫–∞–∑–æ–≤: <code>{get_positions}—à—Ç</code>\n"
    )


# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
@router.callback_query(F.data == "prod_removes_positions")
async def prod_removes_positions(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    get_positions = len(Positionx.get_all())

    await call.message.edit_text(
        f"<b>‚ùå –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã?</b>\n"
        f"üìÅ –ü–æ–∑–∏—Ü–∏–π: <code>{get_positions}—à—Ç</code>\n",
        reply_markup=products_removes_positions_finl(),
    )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π (–∑–∞–∫–∞–∑–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
@router.callback_query(F.data == "prod_removes_positions_confirm")
async def prod_position_remove(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    get_positions = len(Positionx.get_all())

    Positionx.clear()

    await call.message.edit_text(
        f"<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –∑–∞–∫–∞–∑—ã</b>\n"
        f"üìÅ –ó–∞–∫–∞–∑–æ–≤: <code>{get_positions}—à—Ç</code>\n"
    )
