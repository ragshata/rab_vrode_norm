# - *- coding: utf- 8 - *-
from typing import Union

from aiogram import Router, Bot, F
from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, Message
import requests
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from tgbot.data.config import SECRET_KEY, SHOP_ID, get_admins
from tgbot.database.db_payments import Paymentsx
from tgbot.database.db_refill import Refillx
from tgbot.database.db_users import Clientx, Userx
from tgbot.database.db_withdraw import Withdrawx
from tgbot.keyboards.inline_user import (
    client_withdraw_method_finl,
    refill_bill_finl,
    refill_method_finl,
    withdraw_method_finl,
)
from tgbot.payment import create_payment, create_payout
from tgbot.services.api_yoomoney import YoomoneyAPI
from tgbot.utils.const_functions import is_number, to_number, gen_id
from tgbot.utils.misc.bot_models import FSM, ARS
from tgbot.utils.misc_functions import send_admins

min_refill_rub = 10  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö

router = Router(name=__name__)


# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@router.callback_query(F.data == "user_refill")
async def refill_method(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    get_payment = Paymentsx.get()

    await call.message.edit_text(
        "<b>üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>",
        reply_markup=refill_method_finl(),
    )


# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@router.callback_query(F.data.startswith("user_refill_method:"))
async def refill_method_select(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    pay_method = call.data.split(":")[1]

    await state.update_data(here_pay_method=pay_method)

    await state.set_state("here_refill_amount")
    await call.message.edit_text("<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>")


################################################################################
################################### –í–í–û–î –°–£–ú–ú–´ #################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
@router.message(F.text, StateFilter("here_refill_amount"))
async def refill_amount_get(message: Message, bot, state: FSM):
    if not message.text.isdigit():
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")

    amount = int(message.text)
    if amount < min_refill_rub or amount > 100_000:
        return await message.answer(
            f"‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {min_refill_rub}‚ÇΩ –∏ –Ω–µ –±–æ–ª–µ–µ 100 000‚ÇΩ."
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(refill_amount=amount)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É email
    await state.set_state("here_refill_email")
    await message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏:")


@router.message(F.text, StateFilter("here_refill_email"))
async def refill_email_get(message: Message, bot, state: FSM):
    email = message.text

    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ email
    if "@" not in email or "." not in email:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_id = message.from_user.id
    user = Userx.get(user_id=message.from_user.id)
    client = Clientx.get(client_id=message.from_user.id)
    phone_client = client.client_number
    phone = user.user_number  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    if not phone:
        phone = phone_client

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    amount = data.get("refill_amount")

    # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ YooKassa
    try:
        payment_data = create_payment(
            amount=amount, user_id=user_id, email=email, phone=phone
        )
        payment_url = payment_data["confirmation"]["confirmation_url"]

        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        await message.answer(
            f"‚úÖ –í–∞—à –ø–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω.\n\n"
            f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{payment_url}"
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")


################################################################################
############################### –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô ##############################
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã - –ÆKassa
@router.callback_query(F.data.startswith("Pay:YooKassa"))
async def refill_check_yookassa(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    pay_way = call.data.split(":")[1]
    payment_id = call.data.split(":")[2]

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        payment_data = check_payment_status(payment_id)
        pay_status = payment_data["status"]
        pay_amount = float(payment_data["amount"]["value"])

        if pay_status == "succeeded":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω —ç—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂
            get_refill = Refillx.get(refill_receipt=payment_id)

            if get_refill is None:
                await refill_success(
                    bot=bot,
                    call=call,
                    pay_way=pay_way,
                    pay_amount=pay_amount,
                    pay_receipt=payment_id,
                    pay_comment=payment_id,
                )
            else:
                await call.answer(
                    "‚ùó –í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω–æ.", True, cache_time=60
                )
        elif pay_status == "pending":
            await call.answer(
                "‚ùóÔ∏è –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                True,
                cache_time=5,
            )
        elif pay_status == "canceled":
            await call.answer("‚ùóÔ∏è –ü–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.", True, cache_time=5)
        else:
            await call.answer(
                f"‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {pay_status}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                True,
                cache_time=5,
            )
    except Exception as e:
        await call.answer(
            f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            True,
            cache_time=5,
        )


################################################################################
############################### –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ #######################
def check_payment_status(payment_id: str) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API –ÆKassa.
    :param payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
    :return: –î–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
    """
    url = f"https://api.yookassa.ru/v3/payments/{payment_id}"

    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    auth = (SHOP_ID, SECRET_KEY)

    response = requests.get(url, auth=auth)

    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {response.json()}")


################################################################################
################################### !–ö–õ–ò–ï–ù–¢! #################################
################################################################################


# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@router.callback_query(F.data == "client_refill")
async def refill_method(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    get_payment = Paymentsx.get()

    await call.message.edit_text(
        "<b>üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>",
        reply_markup=refill_method_finl(),
    )


# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@router.callback_query(F.data.startswith("client_refill_method:"))
async def refill_method_select(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    pay_method = call.data.split(":")[1]

    await state.update_data(here_pay_method=pay_method)

    await state.set_state("client_here_refill_amount")
    await call.message.edit_text("<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>")


################################################################################
################################### –í–í–û–î –°–£–ú–ú–´ #################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
@router.message(F.text, StateFilter("client_here_refill_amount"))
async def refill_amount_get(message: Message, bot, state: FSM):
    if not message.text.isdigit():
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")

    amount = int(message.text)
    if amount < min_refill_rub or amount > 100_000:
        return await message.answer(
            f"‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {min_refill_rub}‚ÇΩ –∏ –Ω–µ –±–æ–ª–µ–µ 100 000‚ÇΩ."
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(refill_amount=amount)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É email
    await state.set_state("client_here_refill_email")
    await message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏:")


@router.message(F.text, StateFilter("client_here_refill_email"))
async def refill_email_get(message: Message, bot, state: FSM):
    email = message.text

    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ email
    if "@" not in email or "." not in email:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    client_id = message.from_user.id
    client = Clientx.get(client_id=message.from_user.id)
    phone = client.client_number  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    if not phone:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    amount = data.get("refill_amount")

    # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ YooKassa
    try:
        payment_data = create_payment(
            amount=amount, user_id=client_id, email=email, phone=phone
        )
        payment_url = payment_data["confirmation"]["confirmation_url"]

        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        await message.answer(
            f"‚úÖ –í–∞—à –ø–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω.\n\n"
            f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{payment_url}"
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")


################################################################################
#################################### –ü–†–û–ß–ï–ï ####################################
# –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
async def refill_success(
    bot: Bot,
    call: CallbackQuery,
    pay_way: str,
    pay_amount: float,
    pay_receipt: Union[str, int] = None,
    pay_comment: str = None,
):
    get_user = Userx.get(user_id=call.from_user.id)
    get_client = Clientx.get(user_id=call.from_user.id)

    if pay_receipt is None:
        pay_receipt = gen_id()
    if pay_comment is None:
        pay_comment = ""

    Refillx.add(
        user_id=get_user.user_id,
        refill_comment=pay_comment,
        refill_amount=pay_amount,
        refill_receipt=pay_receipt,
        refill_method=pay_way,
    )

    Userx.update(
        call.from_user.id,
        user_balance=round(get_user.user_balance + pay_amount, 2),
        user_refill=round(get_user.user_refill + pay_amount, 2),
    )

    Clientx.update(
        call.from_user.id,
        client_balance=round(get_client.client_balance + pay_amount, 2),
        client_refill=round(get_client.client_refill + pay_amount, 2),
    )

    await call.message.edit_text(
        f"<b>üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É <code>{pay_amount}‚ÇΩ</code>. –£–¥–∞—á–∏ ‚ù§Ô∏è\n"
        f"üßæ –ß–µ–∫: <code>#{pay_receipt}</code></b>",
    )

    await send_admins(
        bot,
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>@{get_user.user_login}</b> | <a href='tg://user?id={get_user.user_id}'>{get_user.user_name}</a> | <code>{get_user.user_id}</code>\n"
        f"üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{pay_amount}‚ÇΩ</code>\n"
        f"üßæ –ß–µ–∫: <code>#{pay_receipt}</code>",
    )


################################################################################
############################### –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ #######################
def check_payment_status(payment_id: str) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API –ÆKassa.
    :param payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
    :return: –î–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
    """
    url = f"https://api.yookassa.ru/v3/payments/{payment_id}"

    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    auth = (SHOP_ID, SECRET_KEY)

    response = requests.get(url, auth=auth)

    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {response.json()}")


#!###############################################################################
################################### ! –í–´–í–û–î ! ###################################
#!###############################################################################

min_withdraw_rub = 100  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö


# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤—ã–≤–æ–¥–∞
@router.callback_query(F.data == "user_withdraw")
async def withdraw_method(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    await call.message.edit_text(
        "<b>üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞</b>",
        reply_markup=withdraw_method_finl(),  # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞
    )


# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤—ã–≤–æ–¥–∞
@router.callback_query(F.data.startswith("user_withdraw_method:"))
async def withdraw_method_select(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    withdraw_method = call.data.split(":")[1]

    await state.update_data(here_withdraw_method=withdraw_method)

    await state.set_state("here_withdraw_amount")
    await call.message.edit_text("<b>üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞</b>")


################################################################################
################################### –í–í–û–î –°–£–ú–ú–´ #################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
@router.message(F.text, StateFilter("here_withdraw_amount"))
async def withdraw_amount_get(message: Message, bot, state: FSM):
    if not message.text.isdigit():
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞.")

    amount = int(message.text)
    if amount < min_withdraw_rub or amount > 100_000:
        return await message.answer(
            f"‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {min_withdraw_rub}‚ÇΩ –∏ –Ω–µ –±–æ–ª–µ–µ 100 000‚ÇΩ."
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    user = Userx.get(user_id=message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.user_balance < amount:
        return await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(withdraw_amount=amount)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –∏–º–µ–Ω–∏
    await state.set_state("here_withdraw_name")
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")


@router.message(F.text, StateFilter("here_withdraw_name"))
async def withdraw_name_get(message: Message, bot, state: FSM):
    name = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(withdraw_name=name)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É —Ñ–∞–º–∏–ª–∏–∏
    await state.set_state("here_withdraw_surname")
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")


@router.message(F.text, StateFilter("here_withdraw_surname"))
async def withdraw_surname_get(message: Message, bot, state: FSM):
    surname = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(withdraw_surname=surname)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state("here_withdraw_phone")
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@router.message(F.text, StateFilter("here_withdraw_phone"))
async def withdraw_phone_get(message: Message, bot, state: FSM):
    phone = message.text

    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone.isdigit() or len(phone) < 10:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ë–µ–∑ '+ '")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(withdraw_phone=phone)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞
    await state.set_state("here_withdraw_bank")
    await message.answer("üè¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞:")


@router.message(F.text, StateFilter("here_withdraw_bank"))
async def withdraw_bank_get(message: Message, bot, state: FSM):
    bank_name = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(withdraw_bank=bank_name)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–∞–ª–∏—á–∏—è –°–ë–ü
    await state.set_state("here_withdraw_sbp")
    await message.answer("‚úÖ –£ –≤–∞—Å –ø–æ–¥–∫–ª—é—á–µ–Ω –°–ë–ü? (–î–∞/–ù–µ—Ç):")


@router.message(F.text, StateFilter("here_withdraw_sbp"))
async def withdraw_sbp_get(message: Message, bot, state: FSM):
    sbp_status = message.text.strip().lower()

    if sbp_status not in ["–¥–∞", "–Ω–µ—Ç"]:
        return await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –°–ë–ü –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(withdraw_sbp=(sbp_status == "–¥–∞"))

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    await state.set_state("here_withdraw_details")
    await message.answer("üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:")


@router.message(F.text, StateFilter("here_withdraw_details"))
async def withdraw_details_get(message: Message, bot: Bot, state: FSM):
    withdraw_details = message.text

    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    if len(withdraw_details) < 16 or not withdraw_details.isdigit():
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    amount = data.get("withdraw_amount")
    name = data.get("withdraw_name")
    surname = data.get("withdraw_surname")
    phone = data.get("withdraw_phone")
    bank_name = data.get("withdraw_bank")
    sbp_status = data.get("withdraw_sbp")
    user_id = message.from_user.id

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_button = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data=f"confirm_withdraw:{user_id}:{amount}",
                    )
                ]
            ]
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π
        admins = get_admins()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in admins:
            await bot.send_message(
                admin_id,
                (
                    f"üì® <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} {surname}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                    f"üè¶ –ë–∞–Ω–∫: {bank_name}\n"
                    f"üîó –°–ë–ü: {'–ü–æ–¥–∫–ª—é—á–µ–Ω' if sbp_status else '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}\n"
                    f"üí≥ –°—á—ë—Ç: {withdraw_details}\n"
                    f"üí∞ –°—É–º–º–∞: {amount}‚ÇΩ"
                ),
                reply_markup=confirm_button,
            )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.callback_query(F.data.startswith("confirm_withdraw:"))
async def confirm_withdraw(call: CallbackQuery, bot: Bot):
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback_data
        _, user_id, amount = call.data.split(":")
        user_id = int(user_id)
        amount = float(amount)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        user = Userx.get(user_id=user_id)
        if user.user_balance >= amount:
            Userx.update(
                user_id=user_id,
                user_balance=round(user.user_balance - amount, 2),
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
            await bot.send_message(
                user_id,
                f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –î–µ–Ω—å–≥–∏ —Å–∫–æ—Ä–æ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à —Å—á—ë—Ç.",
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
            await call.message.edit_text(
                f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω."
            )
        else:
            await call.message.edit_text(
                f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: {user.user_balance}‚ÇΩ."
            )
    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")


async def notify_admins_about_withdraw(
    bot: Bot, user_id: int, amount: float, card_number: str
):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤.

    :param bot: —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–≥–æ –≤—ã–≤–æ–¥
    :param amount: —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞
    :param card_number: –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã
    """
    admins = get_admins()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for admin_id in admins:
        await bot.send_message(
            admin_id,
            (
                f"üì® <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}\n"
                f"üí≥ –°—á—ë—Ç: {card_number}\n"
                f"üí∞ –°—É–º–º–∞: {amount}‚ÇΩ"
            ),
        )


##########################################################
##########################################################
#######################!–ö–õ–ò–ï–ù–¢!###########################
##########################################################
##########################################################
# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤—ã–≤–æ–¥–∞
@router.callback_query(F.data == "client_withdraw")
async def withdraw_method(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    await call.message.edit_text(
        "<b>üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞</b>",
        reply_markup=client_withdraw_method_finl(),  # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞
    )


# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤—ã–≤–æ–¥–∞
@router.callback_query(F.data.startswith("client_withdraw_method:"))
async def withdraw_method_select(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    withdraw_method = call.data.split(":")[1]

    await state.update_data(here_withdraw_method=withdraw_method)

    await state.set_state("client_here_withdraw_amount")
    await call.message.edit_text("<b>üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞</b>")


################################################################################
################################### –í–í–û–î –°–£–ú–ú–´ #################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
@router.message(F.text, StateFilter("client_here_withdraw_amount"))
async def withdraw_amount_get(message: Message, bot, state: FSM):
    if not message.text.isdigit():
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞.")

    amount = int(message.text)
    if amount < min_withdraw_rub or amount > 100_000:
        return await message.answer(
            f"‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {min_withdraw_rub}‚ÇΩ –∏ –Ω–µ –±–æ–ª–µ–µ 100 000‚ÇΩ."
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    client = Clientx.get(client_id=message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if client.client_balance < amount:
        return await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(withdraw_amount=amount)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –∏–º–µ–Ω–∏
    await state.set_state("client_here_withdraw_name")
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")


@router.message(F.text, StateFilter("client_here_withdraw_name"))
async def withdraw_name_get(message: Message, bot, state: FSM):
    name = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(withdraw_name=name)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É —Ñ–∞–º–∏–ª–∏–∏
    await state.set_state("client_here_withdraw_surname")
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")


@router.message(F.text, StateFilter("client_here_withdraw_surname"))
async def withdraw_surname_get(message: Message, bot, state: FSM):
    surname = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(withdraw_surname=surname)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state("client_here_withdraw_phone")
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@router.message(F.text, StateFilter("client_here_withdraw_phone"))
async def withdraw_phone_get(message: Message, bot, state: FSM):
    phone = message.text

    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone.isdigit() or len(phone) < 10:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ë–µ–∑ '+' ")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(withdraw_phone=phone)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞
    await state.set_state("client_here_withdraw_bank")
    await message.answer("üè¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞:")


@router.message(F.text, StateFilter("client_here_withdraw_bank"))
async def withdraw_bank_get(message: Message, bot, state: FSM):
    bank_name = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(withdraw_bank=bank_name)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–∞–ª–∏—á–∏—è –°–ë–ü
    await state.set_state("client_here_withdraw_sbp")
    await message.answer("‚úÖ –£ –≤–∞—Å –ø–æ–¥–∫–ª—é—á–µ–Ω –°–ë–ü? (–î–∞/–ù–µ—Ç):")


@router.message(F.text, StateFilter("client_here_withdraw_sbp"))
async def withdraw_sbp_get(message: Message, bot, state: FSM):
    sbp_status = message.text.strip().lower()

    if sbp_status not in ["–¥–∞", "–Ω–µ—Ç"]:
        return await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –°–ë–ü –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(withdraw_sbp=(sbp_status == "–¥–∞"))

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    await state.set_state("client_here_withdraw_details")
    await message.answer("üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:")


@router.message(F.text, StateFilter("client_here_withdraw_details"))
async def withdraw_details_get(message: Message, bot: Bot, state: FSM):
    withdraw_details = message.text

    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    if len(withdraw_details) < 16 or not withdraw_details.isdigit():
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    amount = data.get("withdraw_amount")
    name = data.get("withdraw_name")
    surname = data.get("withdraw_surname")
    phone = data.get("withdraw_phone")
    bank_name = data.get("withdraw_bank")
    sbp_status = data.get("withdraw_sbp")
    client_id = message.from_user.id

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_button = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data=f"client_confirm_withdraw:{client_id}:{amount}",
                    )
                ]
            ]
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π
        admins = get_admins()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in admins:
            await bot.send_message(
                admin_id,
                (
                    f"üì® <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} {surname}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                    f"üè¶ –ë–∞–Ω–∫: {bank_name}\n"
                    f"üîó –°–ë–ü: {'–ü–æ–¥–∫–ª—é—á–µ–Ω' if sbp_status else '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}\n"
                    f"üí≥ –°—á—ë—Ç: {withdraw_details}\n"
                    f"üí∞ –°—É–º–º–∞: {amount}‚ÇΩ"
                ),
                reply_markup=confirm_button,
            )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.callback_query(F.data.startswith("client_confirm_withdraw:"))
async def client_confirm_withdraw(call: CallbackQuery, bot: Bot):
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback_data
        _, client_id, amount = call.data.split(":")
        client_id = int(client_id)
        amount = float(amount)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        client = Clientx.get(client_id=client_id)
        if client.client_balance >= amount:
            Clientx.update(
                client_id=client_id,
                client_balance=round(client.client_balance - amount, 2),
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
            await bot.send_message(
                client_id,
                f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –î–µ–Ω—å–≥–∏ —Å–∫–æ—Ä–æ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à —Å—á—ë—Ç.",
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
            await call.message.edit_text(
                f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {client_id} –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω."
            )
        else:
            await call.message.edit_text(
                f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: {client.client_balance}‚ÇΩ."
            )
    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
