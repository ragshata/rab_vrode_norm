# - *- coding: utf- 8 - *-
import asyncio

from aiogram import Router, Bot, F
from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, Message

from tgbot.database.db_purchases import Purchasesx
from tgbot.database.db_users import Userx
from tgbot.keyboards.inline_user import (
    products_confirm_finl,
    products_return_finl,
    user_client_finl,
)
from tgbot.keyboards.inline_user_page import *
from tgbot.keyboards.reply_main import menu_frep, menu_second_start
from tgbot.utils.const_functions import (
    convert_day,
    split_messages,
    get_unix,
    ded,
    del_message,
    convert_date,
    gen_id,
)
from tgbot.utils.misc.bot_models import FSM, ARS
from tgbot.utils.text_functions import position_open_user

router = Router(name=__name__)


# –°—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ó–∞–∫–∞–∑—ã
@router.callback_query(F.data.startswith("buy_category_swipe:"))
async def user_buy_category_swipe(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text(
        "<b>üîé –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>",
        reply_markup=prod_item_category_swipe_fp(remover),
    )


@router.callback_query(F.data.startswith("buy_category_open:"))
async def user_buy_category_open(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    data_parts = call.data.split(":")  # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    category_id = data_parts[1]  # –ü–æ–ª—É—á–∞–µ–º category_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    if len(data_parts) > 2:
        remover = int(data_parts[2])
    else:
        remover = (
            0  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        )

    get_category = Categoryx.get(category_id=category_id)
    get_positions = Positionx.gets(category_id=category_id)

    if len(get_positions) >= 1:
        await del_message(call.message)

        await call.message.answer(
            f"<b>üîé –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –∑–∞–∫–∞–∑</b>",
            reply_markup=prod_item_position_swipe_fp(remover, category_id),
        )
    else:
        if remover == 0:
            await call.message.edit_text(
                "<b>üîé –£–≤—ã, –∑–∞–∫–∞–∑—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>"
            )
            await call.answer("‚ùó –ó–∞–∫–∞–∑—ã –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
        else:
            await call.answer(
                f"‚ùï –ó–∞–∫–∞–∑—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category.category_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                True,
                cache_time=5,
            )


# –°—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ó–∞–∫–∞–∑—ã
@router.callback_query(F.data.startswith("buy_position_swipe:"))
async def user_buy_position_swipe(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    get_category = Categoryx.get(category_id=category_id)

    await del_message(call.message)
    await call.message.answer(
        f"<b>üîé –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –∑–∞–∫–∞–∑</b>",
        reply_markup=prod_item_position_swipe_fp(remover, category_id),
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ó–∞–∫–∞–∑—ã
@router.callback_query(F.data.startswith("buy_position_open:"))
async def user_buy_position_open(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    position_id = call.data.split(":")[1]
    position_unix = call.data.split(":")[2]

    await state.clear()

    await del_message(call.message)
    await position_open_user(bot, call.from_user.id, position_id, position_unix)


#################################### –í–´–ü–û–õ–ù–ï–ù–ò–ï ###################################
# –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
@router.callback_query(F.data.startswith("buy_item_open:"))
async def user_buy_open(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    position_id = call.data.split(":")[1]
    position_unix = call.data.split(":")[2]

    get_position = Positionx.get(position_unix=position_unix)
    get_items = Itemx.gets(position_id=position_id)
    get_user = Userx.get(user_id=call.from_user.id)

    if True:
        await state.clear()

        await del_message(call.message)

        await call.message.answer(
            ded(
                f"""
                <b>‚ùì –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ç–æ–≤—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑?</b>
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                ‚ñ™Ô∏è –ó–∞–∫–∞–∑: <code>{get_position.position_name}</code>
                ‚ñ™Ô∏è –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: <code>{get_position.position_price}‚ÇΩ</code>
            """
            ),
            reply_markup=products_confirm_finl(
                position_id, get_position.category_id, get_position.position_unix
            ),
        )


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ó–∞–∫–∞–∑—ã
@router.message(F.text, StateFilter("here_item_count"))
async def user_buy_count(message: Message, bot: Bot, state: FSM, arSession: ARS):
    position_id = (await state.get_data())["here_buy_position_id"]

    get_position = Positionx.get(position_id=position_id)
    get_user = Userx.get(user_id=message.from_user.id)
    client_id = get_position.position_id
    amount_pay = round(get_position.position_price, 2)
    get_purchases = Purchasesx.gets(user_id=message.from_user.id)
    how_days = int(get_unix() - get_user.user_unix) // 60 // 60 // 24
    count_items = sum([purchase.purchase_count for purchase in get_purchases])

    await state.clear()

    await message.answer(
        ded(
            f"""
            <b>üßëüèª‚Äçüíª –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ç–æ–≤—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑?</b>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            ‚ñ™Ô∏è –ó–∞–∫–∞–∑: <code>{get_position.position_name}</code>
            ‚ñ™Ô∏è –¶–µ–Ω–∞: <code>{amount_pay}‚ÇΩ</code>
        """
        ),
        reply_markup=products_confirm_finl(position_id, get_position.category_id),
    )


@router.callback_query(F.data.startswith("buy_item_confirm:"))
async def user_buy_confirm(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    position_id = int(call.data.split(":")[1])
    position_unix = int(call.data.split(":")[2])
    await call.message.edit_text("<b>üîÑ –ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞</b>")

    get_position = Positionx.get(position_unix=position_unix)
    get_user = Userx.get(user_id=call.from_user.id)
    client_id = get_position.position_id  # ID –∑–∞–∫–∞–∑—á–∏–∫–∞
    purchase_price = round(get_position.position_price, 2)
    user_rating = (
        round(get_user.user_rating_avg, 2) if get_user.user_rating_avg else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
    await bot.send_message(
        chat_id=client_id,
        text=ded(
            f"""
            <b>üì¶ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:</b>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            ‚ñ™Ô∏è –ó–∞–∫–∞–∑: <code>{get_position.position_name}</code>
            ‚ñ™Ô∏è –¶–µ–Ω–∞: <code>{purchase_price}‚ÇΩ</code>

            <b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b>
            üÜî –ò–º—è: <code>{get_user.user_name} {get_user.user_surname}</code>
            ‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: <code>{user_rating}</code>
            üï∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>{convert_date(get_user.user_unix, False, False)}</code>
            """
        ),
        reply_markup=confirm_tusk_button(
            position_id, purchase_price, call.from_user.id, position_unix
        ),
    )


from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


@router.callback_query(F.data.startswith("buy_item_confirm_fl:"))
async def client_accept_worker(call: CallbackQuery, bot: Bot):
    data = call.data.split(":")
    position_id = int(data[1])
    position_unix = int(data[4])
    user_id = int(data[3])
    get_position = Positionx.get(position_unix=position_unix)
    chat_link = get_position.position_id  # –ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    await bot.send_message(
        chat_id=user_id,
        text=f"<b>–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!</b>",
        reply_markup=user_client_finl(chat_link),
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    Positionx.update_unix(position_unix, worker_id=user_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
    await call.message.edit_text("<b>–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</b>")


@router.callback_query(F.data.startswith("buy_item_confirm_cl:"))
async def client_reject_worker(call: CallbackQuery, bot: Bot):
    data = call.data.split(":")
    user_id = int(data[3])

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    await bot.send_message(
        chat_id=user_id,
        text="<b>–ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–∫–∞–∑–∞–ª –≤–∞–º –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞</b>",
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
    await call.message.edit_text("<b>–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</b>")


def confirm_tusk_button(
    position_id: int, amount: float, user_id: int, position_unix
) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"buy_item_confirm_fl:{position_id}:{amount}:{user_id}:{position_unix}",
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"buy_item_confirm_cl:{position_id}:{amount}:{user_id}:{position_unix}",
                ),
            ]
        ]
    )


from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
